r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Flex
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""

from datetime import datetime
from typing import Any, Dict, List, Optional, Union
from twilio.base import deserialize, serialize, values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version


class InsightsConversationalAiInstance(InstanceResource):

    class Granularity(object):
        DAYS = "days"
        WEEKS = "weeks"
        MONTHS = "months"
        QUARTERS = "quarters"
        YEARS = "years"

    """
    :ivar instance_sid: Sid of Flex Service Instance
    :ivar report_id: The type of report required to fetch.Like gauge,channel-metrics,queue-metrics
    :ivar granularity: 
    :ivar period_start: The start date from which report data is included
    :ivar period_end: The end date till report data is included
    :ivar updated: Updated time of the report
    :ivar total_pages: Represents total number of pages fetched report has
    :ivar page: Page offset required for pagination
    :ivar rows: List of report breakdown 
    :ivar url: The URL of this resource.
    """

    def __init__(
        self,
        version: Version,
        payload: Dict[str, Any],
        instance_sid: Optional[str] = None,
    ):
        super().__init__(version)

        self.instance_sid: Optional[str] = payload.get("instance_sid")
        self.report_id: Optional[str] = payload.get("report_id")
        self.granularity: Optional["InsightsConversationalAiInstance.Granularity"] = (
            payload.get("granularity")
        )
        self.period_start: Optional[datetime] = deserialize.iso8601_datetime(
            payload.get("period_start")
        )
        self.period_end: Optional[datetime] = deserialize.iso8601_datetime(
            payload.get("period_end")
        )
        self.updated: Optional[datetime] = deserialize.iso8601_datetime(
            payload.get("updated")
        )
        self.total_pages: Optional[int] = deserialize.integer(
            payload.get("total_pages")
        )
        self.page: Optional[int] = deserialize.integer(payload.get("page"))
        self.rows: Optional[List[Dict[str, object]]] = payload.get("rows")
        self.url: Optional[str] = payload.get("url")

        self._solution = {
            "instance_sid": instance_sid or self.instance_sid,
        }
        self._context: Optional[InsightsConversationalAiContext] = None

    @property
    def _proxy(self) -> "InsightsConversationalAiContext":
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: InsightsConversationalAiContext for this InsightsConversationalAiInstance
        """
        if self._context is None:
            self._context = InsightsConversationalAiContext(
                self._version,
                instance_sid=self._solution["instance_sid"],
            )
        return self._context

    def fetch(
        self,
        max_rows: Union[int, object] = values.unset,
        report_id: Union[str, object] = values.unset,
        granularity: Union[
            "InsightsConversationalAiInstance.Granularity", object
        ] = values.unset,
        include_date: Union[datetime, object] = values.unset,
    ) -> "InsightsConversationalAiInstance":
        """
        Fetch the InsightsConversationalAiInstance

        :param max_rows: Maximum number of rows to return
        :param report_id: The type of report required to fetch.Like gauge,channel-metrics,queue-metrics
        :param granularity: The time period for which report is needed
        :param include_date: A reference date that should be included in the returned period

        :returns: The fetched InsightsConversationalAiInstance
        """
        return self._proxy.fetch(
            max_rows=max_rows,
            report_id=report_id,
            granularity=granularity,
            include_date=include_date,
        )

    async def fetch_async(
        self,
        max_rows: Union[int, object] = values.unset,
        report_id: Union[str, object] = values.unset,
        granularity: Union[
            "InsightsConversationalAiInstance.Granularity", object
        ] = values.unset,
        include_date: Union[datetime, object] = values.unset,
    ) -> "InsightsConversationalAiInstance":
        """
        Asynchronous coroutine to fetch the InsightsConversationalAiInstance

        :param max_rows: Maximum number of rows to return
        :param report_id: The type of report required to fetch.Like gauge,channel-metrics,queue-metrics
        :param granularity: The time period for which report is needed
        :param include_date: A reference date that should be included in the returned period

        :returns: The fetched InsightsConversationalAiInstance
        """
        return await self._proxy.fetch_async(
            max_rows=max_rows,
            report_id=report_id,
            granularity=granularity,
            include_date=include_date,
        )

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.FlexApi.V1.InsightsConversationalAiInstance {}>".format(context)


class InsightsConversationalAiContext(InstanceContext):

    def __init__(self, version: Version, instance_sid: str):
        """
        Initialize the InsightsConversationalAiContext

        :param version: Version that contains the resource
        :param instance_sid: Sid of Flex Service Instance
        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "instance_sid": instance_sid,
        }
        self._uri = "/Insights/Instances/{instance_sid}/AI/Reports".format(
            **self._solution
        )

    def fetch(
        self,
        max_rows: Union[int, object] = values.unset,
        report_id: Union[str, object] = values.unset,
        granularity: Union[
            "InsightsConversationalAiInstance.Granularity", object
        ] = values.unset,
        include_date: Union[datetime, object] = values.unset,
    ) -> InsightsConversationalAiInstance:
        """
        Fetch the InsightsConversationalAiInstance

        :param max_rows: Maximum number of rows to return
        :param report_id: The type of report required to fetch.Like gauge,channel-metrics,queue-metrics
        :param granularity: The time period for which report is needed
        :param include_date: A reference date that should be included in the returned period

        :returns: The fetched InsightsConversationalAiInstance
        """

        data = values.of(
            {
                "MaxRows": max_rows,
                "ReportId": report_id,
                "Granularity": granularity,
                "IncludeDate": serialize.iso8601_datetime(include_date),
            }
        )

        payload = self._version.fetch(method="GET", uri=self._uri, params=data)

        return InsightsConversationalAiInstance(
            self._version,
            payload,
            instance_sid=self._solution["instance_sid"],
        )

    async def fetch_async(
        self,
        max_rows: Union[int, object] = values.unset,
        report_id: Union[str, object] = values.unset,
        granularity: Union[
            "InsightsConversationalAiInstance.Granularity", object
        ] = values.unset,
        include_date: Union[datetime, object] = values.unset,
    ) -> InsightsConversationalAiInstance:
        """
        Asynchronous coroutine to fetch the InsightsConversationalAiInstance

        :param max_rows: Maximum number of rows to return
        :param report_id: The type of report required to fetch.Like gauge,channel-metrics,queue-metrics
        :param granularity: The time period for which report is needed
        :param include_date: A reference date that should be included in the returned period

        :returns: The fetched InsightsConversationalAiInstance
        """

        data = values.of(
            {
                "MaxRows": max_rows,
                "ReportId": report_id,
                "Granularity": granularity,
                "IncludeDate": serialize.iso8601_datetime(include_date),
            }
        )

        payload = await self._version.fetch_async(
            method="GET", uri=self._uri, params=data
        )

        return InsightsConversationalAiInstance(
            self._version,
            payload,
            instance_sid=self._solution["instance_sid"],
        )

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.FlexApi.V1.InsightsConversationalAiContext {}>".format(context)


class InsightsConversationalAiList(ListResource):

    def __init__(self, version: Version):
        """
        Initialize the InsightsConversationalAiList

        :param version: Version that contains the resource

        """
        super().__init__(version)

    def get(self, instance_sid: str) -> InsightsConversationalAiContext:
        """
        Constructs a InsightsConversationalAiContext

        :param instance_sid: Sid of Flex Service Instance
        """
        return InsightsConversationalAiContext(self._version, instance_sid=instance_sid)

    def __call__(self, instance_sid: str) -> InsightsConversationalAiContext:
        """
        Constructs a InsightsConversationalAiContext

        :param instance_sid: Sid of Flex Service Instance
        """
        return InsightsConversationalAiContext(self._version, instance_sid=instance_sid)

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return "<Twilio.FlexApi.V1.InsightsConversationalAiList>"
